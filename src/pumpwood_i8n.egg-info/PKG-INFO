Metadata-Version: 2.4
Name: pumpwood-i8n
Version: 1.0.1
Summary: Package for internationalization of Pumpwood Systems
Home-page: https://github.com/Murabei-OpenSource-Codes/pumpwood-communication
Author: AndrÃ© Andrade Baceti
Author-email: a.baceti@murabei.com
License: BSD-3-Clause License
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests
Requires-Dist: simplejson
Requires-Dist: loguru>=0.7.3
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# PumpWood I8n
This packages permit implementation of translation of Pumpwood using
a backend table at Pumpwood Auth for mapping values.

<p align="center" width="60%">
  <img src="doc/sitelogo-horizontal.png" /> <br>

  <a href="https://en.wikipedia.org/wiki/Cecropia">
    Pumpwood is a native brasilian tree
  </a> which has a symbiotic relation with ants (Murabei)
</p>

## Quick start
The main class in package is PumpwoodI8n, it can be used to translate
sentences.

```python
from pumpwood_i8n.translate import PumpwoodI8n
from pumpwood_communication.microservices import PumpWoodMicroService


# It is necessary to instantiate a micro-service object to call back-end
# for translation.
microservice = PumpWoodMicroService(
    server_url='http://localhost/',
    username="pumpwood", password="is a nice system")

# Instantiate an object to be initialized at application
pumpwood_i8n = PumpwoodI8n(microservice=microservice)
translated_str= pumpwood_i8n.t(
    sentence="Translate this sequence please?",
    # Tags can be used to differentiate same, but with different contexts
    # so different translations.
    tag="login",

    # Flag to indicate if translation is at plural or not.
    plural=False,

    # Reference language to make translation
    language: str = "",

    # It is possible give different translations according to different
    # Type of users if needed
    user_type: str = "")
```

It is possible to instantiate an empty object and then initiate the
microservice.

```python
from pumpwood_i8n.translate import PumpwoodI8n
from pumpwood_communication.microservices import PumpWoodMicroService


# It is necessary to instantiate a micro-service object to call back-end
# for translation.
microservice = PumpWoodMicroService(
    server_url='http://localhost/',
    username="pumpwood", password="is a nice system")

# Instantiate an object to be initialized at application
pumpwood_i8n = PumpwoodI8n()
pumpwood_i8n.init(microservice=microservice)
```

This can be used to initiate the object available at singletons.
```python
from pumpwood_i8n.singletons import pumpwood_i8n


microservice = PumpWoodMicroService(
    server_url='http://localhost/',
    username="pumpwood", password="is a nice system")

# Instantiate the object available at pumpwood_i8n
pumpwood_i8n = PumpwoodI8n()
pumpwood_i8n.init(microservice=microservice)
```

Pumpwood I8n make a cache locally to avoid making to many calls to backend.
Cache will be invalidated after `PUMPOOD__I8N__CACHE_EXPIRY` hours. It
is possible to set PUMPOOD__I8N__CACHE_EXPIRY with float values.

## Enviroment Paramenters
**PUMPOOD__I8N__CACHE_EXPIRY [float]:** Set the expiry time for locally
  cached values for translation. After the period sentence will be translated
  again renewing the local cache.
